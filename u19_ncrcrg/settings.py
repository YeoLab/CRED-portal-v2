"""
Django settings for u19_ncrcrg project.

Generated by 'django-admin startproject' using Django 2.1.1.

For more information on this file, see
https://docs.djangoproject.com/en/2.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.1/ref/settings/
"""

import os

import dash_bootstrap_components as dbc
from django.conf import global_settings
from django.contrib import messages

BOOTSTRAP_THEME = dbc.themes.YETI

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!

SECRET_KEY = os.environ['AWS_ACCESS_KEY_ID']

# SECURITY WARNING: don't run with debug turned on in production!

DEBUG = True if os.environ['PLATFORM'] != 'PRD' else False

ALLOWED_HOSTS = [
    'localhost',
    '127.0.0.1',
    'www.cred-portal-test.com',
    'www.cred-portal.com',
    'cred-portal-test.com',
    'cred-portal.com',
    '*',
]


def get_linux_ec2_private_ip():
    """
    This will automatically add the instance's Private IP to ALLOWED_HOSTS
    during startup.
    This will also avoid  issues in the future during any scaling activities
    or any updates that can cause the instances to be replaced as the
    new instances will have new IPs which are not set in the ALLOWED_HOSTS.
    """
    from urllib.request import urlopen

    try:
        response = urlopen('http://169.254.169.254/latest/meta-data/local-ipv4', timeout=3)  # noqa
        return response.read().decode("utf-8")
    except Exception:
        return None
    finally:
        try:
            response.close()  # noqa
        except UnboundLocalError:
            pass


private_ip = get_linux_ec2_private_ip()

if private_ip:
    ALLOWED_HOSTS.append(private_ip)
# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'u19_ncrcrg.accounts',
    'u19_ncrcrg',
    'rest_framework',
    'crispy_forms',
    'django_extensions',
    'webpack_loader',
    'corsheaders',
    'channels',
    'bootstrap4',
    'whitenoise.runserver_nostatic',
    'django_plotly_dash.apps.DjangoPlotlyDashConfig',
    'dpd_static_support',
    'social_django',
    'widget_tweaks',
]

AUTH_PROFILE_MODULE = "accounts.UserProfile"

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django_plotly_dash.middleware.BaseMiddleware',
    'corsheaders.middleware.CorsMiddleware',
]

PLOTLY_DASH = {
    "ws_route": "ws/channel",

    "insert_demo_migrations": False,  # Insert model instances used by the demo

    "http_poke_enabled": True,  # Flag controlling availability of direct-to-messaging http endpoint

    "view_decorator": None,  # Specify a function to be used to wrap each of the dpd view functions

    "cache_arguments": False,  # True for cache, False for session-based argument propagation
}


def str2bool(v):
    """
    Evaluates a string to boolean.
    :param v: string
    :return: boolean
    """
    if type(v) is bool:
        return v
    return v.lower() in ("True", "true", "TRUE", "1", 1)


# TSCC settings
USS_ROOT = os.environ['USS_ROOT']

EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = os.environ['EMAIL_HOST']
EMAIL_HOST_USER = os.environ['EMAIL_HOST_USER']
EMAIL_HOST_PASSWORD = os.environ['EMAIL_HOST_PASSWORD']
EMAIL_PORT = os.environ['EMAIL_PORT']
EMAIL_USE_TLS = str2bool(os.environ['EMAIL_USE_TLS'])
EMAIL_USE_SSL = str2bool(os.environ['EMAIL_USE_SSL'])

# Globus settings
CRED_BASE_URL = os.environ['CRED_BASE_URL']
SOCIAL_AUTH_GLOBUS_KEY = os.environ['SOCIAL_AUTH_GLOBUS_KEY']
SOCIAL_AUTH_GLOBUS_SECRET = os.environ['SOCIAL_AUTH_GLOBUS_SECRET']
SOCIAL_AUTH_GLOBUS_AUTH_EXTRA_ARGUMENTS = {'access_type': 'offline', }
SOCIAL_AUTH_GLOBUS_SCOPE = ['urn:globus:auth:scope:groups.api.globus.org:all',
                                'openid', 'email', 'profile',
                                'urn:globus:auth:scope:transfer.api.globus.org:all']
SOCIAL_AUTH_FIELDS_STORED_IN_SESSION = ['key']
GLOBUS_BASE_URL = os.environ['GLOBUS_BASE_URL']
GLOBUS_TRANSFER_BASE_URL = os.environ['GLOBUS_TRANSFER_BASE_URL']
GLOBUS_USS_EP_ID = os.environ['GLOBUS_USS_EP_ID']
GLOBUS_LOGOUT_URI = os.environ['GLOBUS_LOGOUT_URI']
GLOBUS_HTTPS_SERVER_BASE_URL = os.environ['GLOBUS_HTTPS_SERVER_BASE_URL']
GLOBUS_JUPYTER_EP_ID = os.environ['GLOBUS_JUPYTER_EP_ID']

# MongoDB settings
MONGODB_USER = os.environ['MONGODB_USER']
MONGODB_PASSWORD = os.environ['MONGODB_PASSWORD']

# redis
REDIS_HOST = 'cred-test-portal.com'
REDIS_PORT = 6379

# OMERO settings
OMERO_USER = os.environ.get('OMERO_USER', None)
OMERO_PASSWORD = os.environ.get('OMERO_PASSWORD', None)

ASGI_STORAGE = 'django.contrib.messages.storage.session.SessionStorage'

ROOT_URLCONF = 'u19_ncrcrg.urls'

if os.environ['PLATFORM'] != 'DEV':
    SECURE_HSTS_SECONDS = 63072000
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_BROWSER_XSS_FILTER = True
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True
    CORS_ORIGIN_ALLOW_ALL = True
    SESSION_EXPIRE_AT_BROWSER_CLOSE = True
    SECURE_CONTENT_TYPE_NOSNIFF = True
    SECURE_HSTS_PRELOAD = True

X_FRAME_OPTIONS = 'SAMEORIGIN'

CSP_DEFAULT_SRC = ["'none'"]
CSP_SCRIPT_SRC = [
    "https://stackpath.bootstrapcdn.com",
    "https://cdn.jsdelivr.net",
    "https://code.jquery.com"
]
CSP_STYLE_SRC = ["https://stackpath.bootstrapcdn.com"]
CSP_IMG_SRC = ["'self'"]

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(BASE_DIR, 'u19_ncrcrg/accounts/templates/'),
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'social_django.context_processors.backends',
                'social_django.context_processors.login_redirect',
            ],
        },
    },
]

# WSGI_APPLICATION = 'u19_ncrcrg.wsgi.application'
ASGI_APPLICATION = 'u19_ncrcrg.routing.application'

if os.environ['PLATFORM'] == 'DEV':
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
        }
    }
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.mysql',
            'NAME': os.environ['DB_NAME'],
            'USER': os.environ['DB_USER'],
            'PASSWORD': os.environ['DB_PASSWORD'],
            'HOST': os.environ['DB_HOST'],
            'PORT': os.environ['DB_PORT'],
        }
    }


CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.memcached.PyMemcacheCache',
        'LOCATION': 'cred-portal-test.com:11211',
    }
}

# credentials to create and manage s3 bucket
S3_CONFIG = {
    'aws_region_name': os.environ.get('S3_AWS_REGION_NAME', 'us-west-1'),
    'aws_access_key_id': os.environ.get('S3_ACCESS_KEY_ID', None),
    'aws_secret_access_key': os.environ.get('S3_SECRET_ACCESS_KEY', None)
}

AUTHENTICATION_BACKENDS = [
    'social_core.backends.globus.GlobusOpenIdConnect',
    'django.contrib.auth.backends.BaseBackend',
    'django.contrib.auth.backends.ModelBackend',
]

SESSION_SERIALIZER = 'django.contrib.sessions.serializers.JSONSerializer'
SESSION_EXPIRE_AT_BROWSER_CLOSE = True

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.'
                'UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.'
                'MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.'
                'CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.'
                'NumericPasswordValidator',
    },
]

# Get our user role for read/write to SQS
SQS_ACCESS_KEY_ID = os.environ['SQS_ACCESS_KEY_ID']
SQS_SECRET_ACCESS_KEY = os.environ['SQS_SECRET_ACCESS_KEY']

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'US/Pacific'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.1/howto/static-files/

STATIC_URL = '/static/'

# Add these new lines
STATICFILES_DIRS = (
    os.path.join(BASE_DIR, 'static'),
)

STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

SESSION_SAVE_EVERY_REQUEST = True

WEBPACK_LOADER = {
    'DEFAULT': {
        'BUNDLE_DIR_NAME': './',
        'STATS_FILE': os.path.join(BASE_DIR, 'static/webpack-stats.json'),
    }
}

LOGIN_EXEMPT_URLS = (
    r'^accounts/login/$',
    r'^accounts/logout/$',
    r'^accounts/register/$',
    r'^accounts/reset-password/$',
    r'^accounts/reset-password/done/$',
    r'^accounts/reset-password/confirm/(?P<uidb64>[0-9A-Za-z]+)-(?P<token>.+)/$',  # noqa
    r'^accounts/reset-password/complete/$',
)

CSRF_FAILURE_VIEW = 'u19_ncrcrg.accounts.views.csrf_failure'
SESSION_COOKIE_AGE = 60 * 60 * 24 * 7
CORS_ORIGIN_ALLOW_ALL = False
SILENCED_SYSTEM_CHECKS = ['urls.W001']

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'default': {
            'format': '%(asctime)s: %(funcName)s: %(levelname)s: %(lineno)d '
                      '- %(message)s'
        }
    },
    'handlers': {
        'console': {  # noqa
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'default'
        },
        'file': {
            'level': 'ERROR',
            'class': 'logging.FileHandler',
            'formatter': 'default',
            'filename': '/var/log/cp_log',
        }
    },
    'loggers': {
        'django.db.backends': {  # noqa
            'handlers': ['console'],
            'level': 'ERROR',
            'propagate': True,
        },
        '': {
            'handlers': ['file'],
            'level': 'ERROR',
            'propagate': True,
        },
    }
}

REST_FRAMEWORK = {
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 10
}

MESSAGE_TAGS = {
    messages.DEBUG: 'alert-info',
    messages.INFO: 'alert-info',
    messages.SUCCESS: 'alert-success',
    messages.WARNING: 'alert-warning',
    messages.ERROR: 'alert-danger',
}

SOCIAL_AUTH_PIPELINE = (
    'social_core.pipeline.social_auth.social_details',
    'social_core.pipeline.social_auth.social_uid',
    'social_core.pipeline.social_auth.auth_allowed',
    'social_core.pipeline.social_auth.social_user',
    'u19_ncrcrg.util.get_username',
    'social_core.pipeline.user.create_user',
    'social_core.pipeline.social_auth.associate_user',
    'social_core.pipeline.social_auth.load_extra_data',
    'u19_ncrcrg.util.user_details',
    'u19_ncrcrg.accounts.models.create_profile',
)

LOGIN_URL = '/login/globus/'
SOCIAL_AUTH_SLUGIFY_USERNAMES = True
